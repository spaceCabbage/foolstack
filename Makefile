.PHONY: help setup up down build build-clean logs shell-django shell-vue migrate app test clean restart status poetry-install bun-install vscode-setup

# Default target
help:
	@echo "Available commands:"
	@echo "  make setup           - Initial setup for new developers"
	@echo "  make vscode-setup    - Set up local development environment for VSCode"
	@echo "  make up              - Start all services"
	@echo "  make down            - Stop all services"
	@echo "  make build           - Smart rebuild with caching (recommended)"
	@echo "  make build-clean     - Full rebuild without cache (slow, for debugging)"
	@echo "  make poetry-install  - Set up Poetry environment for VSCode"
	@echo "  make bun-install     - Generate Bun lock file"
	@echo "  make logs            - View logs from all services"
	@echo "  make shell-django    - Open shell in Django container"
	@echo "  make shell-vue       - Open shell in Vue container"
	@echo "  make migrate         - Run Django migrations"
	@echo "  make migrations       - Create Django migrations"
	@echo "  make app <name>      - Create a new Django app"
	@echo "  make superuser       - Create Django superuser"
	@echo "  make test            - Run Django tests"
	@echo "  make clean           - Remove all containers and volumes"
	@echo "  make restart         - Restart all services"
	@echo "  make status          - Show container status"

# Initial setup for new developers
setup:
	@echo "🚀 Setting up Gelt development environment..."
	@if [ -f .env ]; then \
		echo "⚠️  .env file already exists. Skipping creation."; \
	else \
		echo "# Generated by 'make setup' on $$(date)" > .env; \
		echo "ENVIRONMENT=development" >> .env; \
		echo "BASE_DOMAIN=localhost" >> .env; \
		echo "DJANGO_SECRET_KEY=$$(python3 -c 'import secrets; print(secrets.token_urlsafe(50))')" >> .env; \
		echo "DATABASE_NAME=db.sqlite3" >> .env; \
		echo "CADDY_EMAIL=admin@example.com" >> .env; \
		echo "DJANGO_PORT=8000" >> .env; \
		echo "VUE_PORT=5173" >> .env; \
		echo "LOG_LEVEL=INFO" >> .env; \
	fi
	@docker-compose build --quiet
	@docker-compose up -d
	@sleep 10
	@docker-compose exec server python manage.py migrate
	@echo ""
	@echo "✅ Setup complete! Your application is running at:"
	@echo "   Frontend: http://localhost"
	@echo "   API: http://api.localhost"
	@echo ""
	@echo "👤 Next step: Create a superuser with 'make superuser'"

# Start services 
up:
	docker-compose up -d
	@echo "Services started. Access the app at:"
	@echo "  CLIENT: http://$(shell grep BASE_DOMAIN .env | cut -d '=' -f2):$(shell grep VUE_PORT .env | cut -d '=' -f2)"
	@echo "  SERVER: http://api.$(shell grep BASE_DOMAIN .env | cut -d '=' -f2):$(shell grep DJANGO_PORT .env | cut -d '=' -f2)"

# Stop services
down:
	docker-compose down

# Smart build with caching (recommended for daily use)
build:
	@echo "🚀 Building with optimizations and caching..."
	docker-compose build

# Full rebuild without cache (for debugging or fresh start)
build-clean:
	@echo "🧹 Full rebuild without cache (this will be slow)..."
	docker-compose build --no-cache

# View logs
logs:
	docker-compose logs -f

# Shell access
shell-django:
	docker-compose exec server /bin/sh

shell-vue:
	docker-compose exec client /bin/sh

# Django commands
migrate:
	docker-compose exec server poetry run python manage.py migrate

migrations:
	docker-compose exec server poetry run python manage.py makemigrations

app:
	@if [ -z "$(word 2,$(MAKECMDGOALS))" ]; then \
		echo "Error: Please specify an app name using 'make app myapp'"; \
		exit 1; \
	fi
	docker-compose exec server poetry run python manage.py startapp $(word 2,$(MAKECMDGOALS))

%:
	@:


superuser:
	docker-compose exec -it server poetry run python manage.py createsuperuser

test:
	docker-compose exec server poetry run python manage.py test

# Clean everything
clean:
	docker-compose down -v
	rm -rf data/*.sqlite3
	@echo "Cleaned all containers and volumes"

# Restart services
restart:
	docker-compose restart

# Show status
status:
	docker-compose ps

# Package manager commands
poetry-install:
	@echo "🔧 Setting up Poetry environment and VSCode integration..."
	cd server && poetry install
	@echo "✅ Local .venv created for VSCode at server/.venv"

bun-install:
	@echo "🔧 Generating Bun lock file..."
	cd client && bun install

# Development specific commands  
dev-install:
	docker-compose exec client bun install

dev-django-shell:
	docker-compose exec server poetry run python manage.py shell

# Production build
prod-build:
	ENVIRONMENT=production docker-compose build

prod-up:
	ENVIRONMENT=production docker-compose up -d

# VSCode development setup
vscode-setup:
	@echo "🔧 Setting up local development environment for VSCode..."
	@echo "📦 Installing Poetry dependencies locally..."
	cd server && poetry install
	@echo "✅ Python environment ready at: server/.venv/bin/python"
	@echo ""
	@echo "🎉 VSCode setup complete! The Python interpreter is configured."
	@echo "   Reload VSCode window to activate the Python environment."