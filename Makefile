.PHONY: help setup up down build build-clean logs shell-django shell-vue migrate app test clean restart status poetry-install bun-install vscode-setup

# Default target
help:
	@echo "Available commands:"
	@echo "  make setup           - Initial setup for new developers"
	@echo "  make vscode-setup    - Set up local development environment for VSCode"
	@echo "  make up              - Start all services"
	@echo "  make down            - Stop all services"
	@echo "  make build           - Smart rebuild with caching (recommended)"
	@echo "  make build-clean     - Full rebuild without cache (slow, for debugging)"
	@echo "  make poetry-install  - Set up Poetry environment for VSCode"
	@echo "  make bun-install     - Generate Bun lock file"
	@echo "  make logs            - View logs from all services"
	@echo "  make shell-django    - Open shell in Django container"
	@echo "  make shell-vue       - Open shell in Vue container"
	@echo "  make migrate         - Run Django migrations"
	@echo "  make migrations       - Create Django migrations"
	@echo "  make app <name>      - Create a new Django app"
	@echo "  make superuser       - Create Django superuser"
	@echo "  make test            - Run Django tests"
	@echo "  make clean           - Remove all containers and volumes"
	@echo "  make restart         - Restart all services"
	@echo "  make status          - Show container status"
	@echo "  make rename <name>   - Rename project from foolstack to <name>"

# Initial setup for new developers
setup:
	@echo "üöÄ Setting up Foolstack development environment..."
	@if [ -f .env ]; then \
		echo "‚ö†Ô∏è  .env file already exists. Skipping creation."; \
	else \
		echo "# Generated by 'make setup' on $$(date)" > .env; \
		echo "ENVIRONMENT=development" >> .env; \
		echo "BASE_DOMAIN=localhost" >> .env; \
		echo "DJANGO_SECRET_KEY=$$(python3 -c 'import secrets; print(secrets.token_urlsafe(50))')" >> .env; \
		echo "DATABASE_NAME=db.sqlite3" >> .env; \
		echo "CADDY_EMAIL=admin@example.com" >> .env; \
		echo "DJANGO_PORT=8000" >> .env; \
		echo "VUE_PORT=5173" >> .env; \
		echo "LOG_LEVEL=INFO" >> .env; \
	fi
	@docker-compose build --quiet
	@docker-compose up -d
	@sleep 10
	@docker-compose exec server python manage.py migrate
	@echo ""
	@echo "‚úÖ Setup complete! Your application is running at:"
	@echo "   Frontend: http://localhost"
	@echo "   API: http://api.localhost"
	@echo ""
	@echo "üë§ Next step: Create a superuser with 'make superuser'"

# Start services 
up:
	docker-compose up -d
	@echo "Services started. Access the app at:"
	@echo "  CLIENT: http://$(shell grep BASE_DOMAIN .env | cut -d '=' -f2):$(shell grep VUE_PORT .env | cut -d '=' -f2)"
	@echo "  SERVER: http://api.$(shell grep BASE_DOMAIN .env | cut -d '=' -f2):$(shell grep DJANGO_PORT .env | cut -d '=' -f2)"

# Stop services
down:
	docker-compose down

# Smart build with caching (recommended for daily use)
build:
	@echo "üöÄ Building with optimizations and caching..."
	docker-compose build

# Full rebuild without cache (for debugging or fresh start)
build-clean:
	@echo "üßπ Full rebuild without cache (this will be slow)..."
	docker-compose build --no-cache

# View logs
logs:
	docker-compose logs -f

# Shell access
shell-django:
	docker-compose exec server /bin/sh

shell-vue:
	docker-compose exec client /bin/sh

# Django commands
migrate:
	docker-compose exec server poetry run python manage.py migrate

migrations:
	docker-compose exec server poetry run python manage.py makemigrations

app:
	@if [ -z "$(word 2,$(MAKECMDGOALS))" ]; then \
		echo "Error: Please specify an app name using 'make app myapp'"; \
		exit 1; \
	fi
	docker-compose exec server poetry run python manage.py startapp $(word 2,$(MAKECMDGOALS))

%:
	@:


superuser:
	docker-compose exec -it server poetry run python manage.py createsuperuser

test:
	docker-compose exec server poetry run python manage.py test

# Clean everything
clean:
	docker-compose down -v --remove-orphans
	rm -rf data/*.sqlite3
	@echo "Cleaned all containers and volumes"

# Restart services
restart:
	docker-compose restart

# Show status
status:
	docker-compose ps

# Package manager commands
poetry-install:
	@echo "üîß Setting up Poetry environment and VSCode integration..."
	cd server && poetry install
	@echo "‚úÖ Local .venv created for VSCode at server/.venv"

bun-install:
	@echo "üîß Generating Bun lock file..."
	cd client && bun install

# Development specific commands  
dev-install:
	docker-compose exec client bun install

dev-django-shell:
	docker-compose exec server poetry run python manage.py shell

# Production build
prod-build:
	ENVIRONMENT=production docker-compose build

prod-up:
	ENVIRONMENT=production docker-compose up -d

# VSCode development setup
vscode-setup:
	@echo "üîß Setting up local development environment for VSCode..."
	@echo "üì¶ Installing Poetry dependencies locally..."
	cd server && poetry install
	@echo "‚úÖ Python environment ready at: server/.venv/bin/python"
	@echo ""
	@echo "üéâ VSCode setup complete! The Python interpreter is configured."
	@echo "   Reload VSCode window to activate the Python environment."

# Rename project from foolstack template
rename:
	@if [ -z "$(word 2,$(MAKECMDGOALS))" ]; then \
		echo "Error: Please specify a project name using 'make rename myproject'"; \
		exit 1; \
	fi
	@# Check if running on Windows
	@if [ -n "$$WINDIR" ] || [ -n "$$SYSTEMROOT" ]; then \
		echo "‚ö†Ô∏è  Windows detected! This command requires Unix tools (find, sed)."; \
		echo ""; \
		echo "üìù To rename your project manually on Windows:"; \
		echo ""; \
		echo "1. Use your IDE's find and replace feature (e.g., VS Code: Ctrl+Shift+H)"; \
		echo "2. Replace these terms across all files:"; \
		echo "   - 'foolstack' ‚Üí '$(word 2,$(MAKECMDGOALS))'"; \
		echo "   - 'Foolstack' ‚Üí '$(shell echo $(word 2,$(MAKECMDGOALS)) | sed 's/^./\u&/' 2>/dev/null || echo $(word 2,$(MAKECMDGOALS)))'"; \
		echo "   - 'FOOLSTACK' ‚Üí '$(shell echo $(word 2,$(MAKECMDGOALS)) | tr '[:lower:]' '[:upper:]' 2>/dev/null || echo $(word 2,$(MAKECMDGOALS)))'"; \
		echo ""; \
		echo "3. Include these file types: *.py, *.js, *.vue, *.html, *.md, *.yml, *.yaml, *.json, *.toml"; \
		echo "4. Exclude these folders: .venv, node_modules, .git, data, logs"; \
		echo ""; \
		echo "üí° Alternatively, use WSL2 or Git Bash to run this command."; \
		exit 1; \
	fi
	@echo "üîÑ Renaming project from foolstack to $(word 2,$(MAKECMDGOALS))..."
	@# Calculate the different case variations
	@$(eval LOWERCASE := $(word 2,$(MAKECMDGOALS)))
	@$(eval UPPERCASE := $(shell echo $(word 2,$(MAKECMDGOALS)) | tr '[:lower:]' '[:upper:]'))
	@$(eval CAPITALIZED := $(shell echo $(word 2,$(MAKECMDGOALS)) | sed 's/^./\u&/'))
	@# Find all text files and perform replacements
	@find . -type f \( -name "*.py" -o -name "*.js" -o -name "*.vue" -o -name "*.html" -o -name "*.md" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" -o -name "*.toml" -o -name "*.txt" -o -name "*.env*" -o -name "Makefile" -o -name "Dockerfile*" \) \
		-not -path "./server/.venv/*" \
		-not -path "./client/node_modules/*" \
		-not -path "./.git/*" \
		-not -path "./data/*" \
		-not -path "./server/logs/*" \
		-exec sed -i.bak \
			-e 's/foolstack/$(LOWERCASE)/g' \
			-e 's/Foolstack/$(CAPITALIZED)/g' \
			-e 's/FOOLSTACK/$(UPPERCASE)/g' {} \; 2>/dev/null || \
	find . -type f \( -name "*.py" -o -name "*.js" -o -name "*.vue" -o -name "*.html" -o -name "*.md" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" -o -name "*.toml" -o -name "*.txt" -o -name "*.env*" -o -name "Makefile" -o -name "Dockerfile*" \) \
		-not -path "./server/.venv/*" \
		-not -path "./client/node_modules/*" \
		-not -path "./.git/*" \
		-not -path "./data/*" \
		-not -path "./server/logs/*" \
		-exec sed -i '' \
			-e 's/foolstack/$(LOWERCASE)/g' \
			-e 's/Foolstack/$(CAPITALIZED)/g' \
			-e 's/FOOLSTACK/$(UPPERCASE)/g' {} \;
	@# Clean up backup files
	@find . -name "*.bak" -type f -delete 2>/dev/null || true
	@echo "‚úÖ Project renamed to $(word 2,$(MAKECMDGOALS))!"
	@echo ""
	@echo "üìù Note: Remember to:"
	@echo "   - Rebuild containers: make build"
	@echo "   - Update git remote if needed"
	@echo "   - Search for any missed references"